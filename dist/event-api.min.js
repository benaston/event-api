!function(a){"use strict";var b={};!function(a){a.registry={}}(b),function(a){function b(a,b,c){var d=b[c];if(void 0===d)throw"methodName not present on subscriber.";if("function"!=typeof d)throw"methodName not a function.";this.subscribers=this.subscribers||{},this.subscribers[a]=this.subscribers[a]||[],this.subscribers[a].some(function(a){return a.cb===d})||this.subscribers[a].push({name:b.name,cb:d})}var c={};c.events={},c.emit=function(a){var b;if(null==a)throw"event not supplied.";b=Array.prototype.slice.call(arguments,1),this.subscribers&&this.subscribers[a].forEach(function(a){a.cb.apply(this,b)})},c.on=function(a){if(null==a)throw"event not supplied.";return{notify:function(c){if(null==c)throw"subscriber not supplied.";return{byCalling:function(d){if(null==d||""===d)throw"methodName not supplied.";b.call(this,a,c,d)}.bind(this)}}.bind(this)}},a.api=c}(b),function(a){function b(a,b){if(null==a||!a.length)throw"connectCommands not supplied.";b=b||{},b.initialApisToLoad=b.initialApisToLoad||[],this.connectCommands=a.reduce(function(a,b){if(null==b.subjectApiName)throw"connectCommand missing subjectApiName.";return a[b.subjectApiName]=b,a},{}),this.registry=b.initialApisToLoad.reduce(function(a,b){if(!b.name)throw"Required api.name property is empty.";return a[b.name]=b,a},{}),Object.getOwnPropertyNames(this.registry).forEach(function(a){var b=this.connectCommands[a];b&&b.run(this.registry)}.bind(this))}b.prototype.apis={},b.prototype.connectCommands={},b.prototype.loadApi=function(a){var b,c;if(null==a)throw"api not supplied.";if(!a.name)throw"Required api.name property is empty.";b=a.name,this.registry[b]=a,c=this.connectCommands[b],c&&c.run(this.registry),Object.getOwnPropertyNames(this.connectCommands).forEach(function(a){var c=this.connectCommands[a];c.subjectApiName!==b&&(c.objectApiNames||[]).some(function(a){return a===b})&&this.registry[c.subjectApiName]&&c.run(this.registry)}.bind(this))},b.prototype.unloadApi=function(a){if(null==a||""===a)throw"apiName not supplied.";null!=this.registry[a]&&(Object.getOwnPropertyNames(this.registry).forEach(function(b){var c=this.registry[b];c.subscribers&&Object.getOwnPropertyNames(c.subscribers).forEach(function(b){c.subscribers[b]=c.subscribers[b].filter(function(b){return b.name!==a})})}.bind(this)),delete this.registry[a])},a.Connector=b}(b),"object"==typeof exports&&module?module.exports=b:"function"==typeof define&&define.amd?define(function(){return b}):a.eventApi=b}(this);